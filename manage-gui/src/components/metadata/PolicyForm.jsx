import React, {useEffect, useState} from "react";

import "./PolicyForm.scss";
import I18n from "i18n-js";
import ReactTooltip from "react-tooltip";
import {Select} from "../index";
import {isEmpty, stop} from "../../utils/Utils";
import CheckBox from "../CheckBox";
import {AutoFormat} from "../../utils/AutoformatPolicy";
import PolicyAttributes from "./PolicyAttributes";
import PolicyRules from "./PolicyRules";
import {ipInfo} from "../../api";
import {getNameForLanguage} from "../../utils/Language";

const ipv4Prefixes = [...Array(33).keys()].filter(i => i > 7).map(prefix => ({value: prefix, label: prefix}));
const ipv6Prefixes = [...Array(129).keys()].filter(i => i > 31 && i % 8 === 0).map(prefix => ({
    value: prefix,
    label: prefix
}));

export default function PolicyForm({
                                       identityProviders = [],
                                       serviceProviders = [],
                                       policyAttributes = [],
                                       allowedLoas = [],
                                       data,
                                       isNew,
                                       errors,
                                       onChange,
                                       onError
                                   }) {

    useEffect(() => {
        if (isNew) {
            //Mark the required regular fields required if not present
            if (data.type !== "step") {
                onError("denyAdvice", isEmpty(data.denyAdvice));
                onError("denyAdviceNl", isEmpty(data.denyAdviceNl));
                onError("attributes", isEmpty(data.attributes));
            } else {
                onError("loas", isEmpty(data.loas));
            }
            onError("description", isEmpty(data.description));
            const urlSearchParams = new URLSearchParams(window.location.search);
            if (urlSearchParams.has("sp")) {
                const sp = urlSearchParams.get("sp");
                onChange("data.serviceProviderIds", [{name: sp}]);
                onError("serviceProviderIds", false);
            } else if (urlSearchParams.has("idp")) {
                const idp = urlSearchParams.get("idp");
                onChange("data.identityProviderIds", [{name: idp}]);
            }
        }
    }, []);

    const policyTypeOptions = ["reg", "step"]
        .map(policyType => ({
            label: I18n.t(`policies.${policyType}`),
            value: policyType
        }));

    const providerLabel = (providers, selectedProvider) => {
        const provider = providers.find(prov => prov.data.entityid === selectedProvider.name);
        return isEmpty(provider) ? selectedProvider.name : getNameForLanguage(provider.data.metaDataFields);
    }

    const excludedFromPush = (providers, selectedProvider) => {
        const provider = providers.find(prov => prov.data.entityid === selectedProvider.name);
        return isEmpty(provider) ? true : !provider.data.metaDataFields['coin:policy_enforcement_decision_required']
    }

    const onChangeIdentityProviders = (options) => {
        onChange("data.identityProviderIds", options.map(option => ({name: option.value})))
    }

    const onChangeServiceProviders = (options) => {
        onChange("data.serviceProviderIds", options.map(option => ({name: option.value})));
        onError("serviceProviderIds", isEmpty(options));
    }

    const providerOptions = (providers, providerKey) =>
        providers
            .filter(provider => !(data[providerKey] || []).some(prov => prov.name === provider.data.entityid))
            .map(provider => ({
                label: provider.data.metaDataFields["name:en"] || "Missing",
                value: provider.data.entityid
            }))

    const providerValues = (providers, providerKey) => {
        return (data[providerKey] || [])
            .map(provider => ({
                value: provider.name,
                excludedFromPush: excludedFromPush(providers, provider),
                label: providerLabel(providers, provider)
            }));
    }


    const internalOnChange = (e, attribute, required = false) => {
        const value = e.target.value;
        onChange(`data.${attribute}`, value);
        if (required) {
            onError(attribute, isEmpty(value));
        }
    }

    const addLoa = option => {
        const loas = data.loas;
        loas.push({
            level: option.value,
            index: loas.length,
            allAttributesMustMatch: true,
            negateCidrNotation: false,
            attributes: [],
            cidrNotations: []
        });
        onChange("data.loas", [...loas]);
        onError("loas", false);
    }

    const autoGenerateDescription = e => {
        stop(e);
        const identityProviderNames = (data.identityProviderIds || []).map(prov => providerLabel(identityProviders, prov));
        const serviceProviderNames = (data.serviceProviderIds || []).map(prov => providerLabel(serviceProviders, prov));
        const description = AutoFormat.description(
            data,
            identityProviderNames,
            serviceProviderNames);
        onChange("data.description", description);
        onError("description", isEmpty(description));
    }

    const onChangePolicyType = option => {
        onChange("data.type", option.value, false, () => {
            const isRegPolicy = option.value === "reg";
            ["denyAdvice", "denyAdviceNl"].forEach(attr => {
                onError(attr, isRegPolicy);
                onChange(`data.${attr}`, "");
            })
            onError("attributes", isRegPolicy);
            onChange("data.attributes", []);
            onError("loas", !isRegPolicy);
            onChange("data.loas", []);
        });
    }

    const renderError = attribute => {
        return (
            <div className="error"><span>{I18n.t("metadata.required", {name: attribute})}</span></div>
        );
    }

    const renderExcludeFromWarning = serviceProviderValues => {
        const excludedServiceProviders = serviceProviderValues.filter(sp => sp.excludedFromPush);
        if (isEmpty(excludedServiceProviders)) {
            return null;
        }
        return (
          <div className="excluded-providers">
              {excludedServiceProviders.map((provider, index) =>
                  <span key={index} dangerouslySetInnerHTML={{__html: I18n.t("policies.providerExcludedFromPush", {name: provider.label})}}/>
                  )}
          </div>
        );
    }

    const renderPolicyType = () => {
        return (
            <div className="input-field">
                <label htmlFor="policyType">
                    <span>{I18n.t("policies.policyType")}</span>
                    {!isNew && <>
                        <i className="fa fa-info-circle"
                           data-for="type-tooltip"
                           data-tip/>
                        <ReactTooltip id="type-tooltip"
                                      type="info"
                                      place="right"
                                      class="tool-tip"
                                      effect="solid">
                            <span>{I18n.t("policies.typeTooltip")}</span>
                        </ReactTooltip>
                    </>}
                </label>
                <Select
                    className="policy-select"
                    onChange={onChangePolicyType}
                    options={policyTypeOptions}
                    disabled={!isNew}
                    value={I18n.t(`policies.${data.type}`)}
                    isSearchable={false}
                />
            </div>
        );
    }

    const renderPolicyName = () => {
        return (
            <div className="input-field">
                <label htmlFor="name">
                    <span>{I18n.t("policies.name")}</span>
                    <i className="fa fa-info-circle"
                       data-for="name-tooltip"
                       data-tip/>
                    <ReactTooltip id="name-tooltip"
                                  type="info"
                                  place="right"
                                  class="tool-tip"
                                  effect="solid">
                        <span>{I18n.t("policies.nameTooltip")}</span>
                    </ReactTooltip>
                </label>
                <input id="name"
                       type="text"
                       value={data.name || ""}
                       onChange={e => internalOnChange(e, "name", true)}/>
                {isEmpty(data.name) && renderError("Name")}
            </div>
        );
    }

    const renderIdentityProviders = () => {
        return (
            <div className="input-field">
                <label htmlFor="institutionProviders">
                    <span>{I18n.t("policies.institutionProviders")}</span>
                    <i className="fa fa-info-circle"
                       data-for="institutionProviders-tooltip"
                       data-tip/>
                    <ReactTooltip id="institutionProviders-tooltip"
                                  type="info"
                                  place="right"
                                  class="tool-tip"
                                  effect="solid">
                        <span>{I18n.t("policies.institutionProvidersTooltip")}</span>
                    </ReactTooltip>
                </label>
                <Select
                    isMulti={true}
                    className="policy-select"
                    onChange={onChangeIdentityProviders}
                    placeholder={I18n.t("policies.institutionProvidersPlaceholder")}
                    options={providerOptions(identityProviders, "identityProviderIds")}
                    value={providerValues(identityProviders, "identityProviderIds")}
                />
            </div>
        );
    }

    const renderServiceProviders = () => {
        const serviceProviderValues = providerValues(serviceProviders, "serviceProviderIds");
        return (
            <div className="input-field">
                <label htmlFor="serviceProviders">
                    <span>{I18n.t("policies.serviceProviders")}</span>
                    <i className="fa fa-info-circle"
                       data-for="serviceProviders-tooltip"
                       data-tip/>
                    <ReactTooltip id="serviceProviders-tooltip"
                                  type="info"
                                  place="right"
                                  class="tool-tip"
                                  effect="solid">
                        <span>{I18n.t("policies.serviceProvidersTooltip")}</span>
                    </ReactTooltip>
                </label>
                <Select
                    isMulti={true}
                    className="policy-select"
                    onChange={onChangeServiceProviders}
                    placeholder={I18n.t("policies.serviceProvidersPlaceholder")}
                    options={providerOptions(serviceProviders, "serviceProviderIds")}
                    value={serviceProviderValues}
                />
                {isEmpty(data.serviceProviderIds) && renderError("Service provider")}
                {renderExcludeFromWarning(serviceProviderValues)}
            </div>
        );
    }

    const renderAccess = () => {
        return (
            <>
                <p>{I18n.t("policies.access")}</p>
                <div className="checkbox-options">
                    <div className="checkbox-container">
                        <label htmlFor="permit">
                            <span>{I18n.t("policies.permit")}</span>
                            <i className="fa fa-info-circle"
                               data-for="permit-tooltip"
                               data-tip/>
                            <ReactTooltip id="permit-tooltip"
                                          type="info"
                                          place="right"
                                          class="tool-tip"
                                          effect="solid">
                                <span>{I18n.t("policies.permitTooltip")}</span>
                            </ReactTooltip>
                        </label>
                        <CheckBox
                            name="permit"
                            onChange={e => onChange("data.denyRule", !e.target.checked)}
                            value={!data.denyRule}
                        />
                    </div>
                    <div className="checkbox-container">
                        <label htmlFor="deny">
                            <span>{I18n.t("policies.deny")}</span>
                            <i className="fa fa-info-circle"
                               data-for="deny-tooltip"
                               data-tip/>
                            <ReactTooltip id="deny-tooltip"
                                          type="info"
                                          place="right"
                                          class="tool-tip"
                                          effect="solid">
                                <span>{I18n.t("policies.denyTooltip")}</span>
                            </ReactTooltip>
                        </label>
                        <CheckBox
                            name="deny"
                            onChange={e => onChange("data.denyRule", e.target.checked)}
                            value={data.denyRule}
                        />
                    </div>
                </div>
            </>
        );
    }

    const loaChanged = (attrName, value, index, callback) => {
        const newLoas = [...data.loas]
        const newLoa = {...newLoas[index], [attrName]: value}
        newLoas.splice(index, 1, newLoa);
        onChange("data.loas", newLoas, false, callback);
    }

    const deleteLoa = level => {
        const newLoas = data.loas.filter(loa => loa.level !== level);
        onChange("data.loas", newLoas);
        if (isEmpty(newLoas)) {
            onError("loas", true);
        }
    }

    const renderIpInfo = ipInfo =>
        <section className="ip-info">
            <div>
                <span className="label">{I18n.t("policies.networkAddress")}</span>
                <span>{ipInfo.networkAddress}</span>
            </div>
            <div>
                <span className="label">{I18n.t("policies.broadcastAddress")}</span>
                <span>{ipInfo.broadcastAddress}</span>
            </div>
            {ipInfo.ipv4 &&
                <div>
                    <span className="label">{I18n.t("policies.capacity")}</span>
                    <span>{parseInt(ipInfo.capacity).toLocaleString("nl")}</span>
                </div>}
        </section>;

    const addCidrNotation = (e, index) => {
        stop(e);
        const newLoas = [...data.loas]
        const newLoa = newLoas[index];
        newLoa.cidrNotations = newLoa.cidrNotations ?? [];
        newLoa.cidrNotations.push({ipAddress: "", prefix: "", index: newLoa.cidrNotations.length});
        onChange("data.loas", newLoas);
    }

    const cidrNotationChanged = (loaIndex, cidrIndex, attr, value) => {
        const newLoas = [...data.loas]
        const newLoa = newLoas[loaIndex];
        const cidrNotation = newLoa.cidrNotations[cidrIndex];
        cidrNotation[attr] = value;
        onChange("data.loas", newLoas);
        if (attr === "prefix") {
            validateIPAddress(null, loaIndex, cidrIndex);
        }
    }

    const removeCidrNotation = (loaIndex, cidrIndex) => {
        const newLoas = [...data.loas]
        const newLoa = newLoas[loaIndex];
        newLoa.cidrNotations = newLoa.cidrNotations.filter(cidr => cidr.index !== cidrIndex);
        onChange("data.loas", newLoas);
    }

    const validateIPAddress = (e, loaIndex, cidrIndex) => {
        stop(e);
        const newLoas = [...data.loas]
        const loa = newLoas[loaIndex]
        const cidrNotation = loa.cidrNotations[cidrIndex];
        ipInfo(cidrNotation.ipAddress, cidrNotation.prefix).then(ipInfo => {
            cidrNotation.invalid = !ipInfo.networkAddress;
            if (ipInfo.networkAddress) {
                cidrNotation.ipInfo = ipInfo;
                cidrNotation.prefix = ipInfo.prefix;
            } else {
                cidrNotation.ipInfo = undefined;
            }
            onChange("data.loas", newLoas);
        });
    };

    const renderLoas = () => {
        return (
            <>
                <p>{I18n.t("policies.loas")}</p>
                <div className="loas">
                    {data.loas.map((loa, i) =>
                        <div key={i}>
                            <div className="loa">
                                <input className="max"
                                       type="text"
                                       disabled={true}
                                       value={loa.level}/>
                                <span onClick={() => deleteLoa(loa.level)}>
                                    <i className="fa fa-trash-o"/>
                                </span>
                            </div>
                            <div className="loa-container">
                                <PolicyRules value={loa.allAttributesMustMatch}
                                             embedded={true}
                                             setRule={(newValue) => loaChanged("allAttributesMustMatch", newValue, i, null)}
                                />
                                <PolicyAttributes attributes={loa.attributes}
                                                  onError={onError}
                                                  allAttributesMustMatch={loa.allAttributesMustMatch}
                                                  allowedAttributes={policyAttributes}
                                                  setAttributes={(attributes, callback) => loaChanged("attributes", attributes, i, callback)}
                                                  includeNegate={true}
                                                  isRequired={false}
                                                  embedded={true}
                                                  isPlayground={false}
                                />
                                <div className="cidr-notations">
                                    {(loa.cidrNotations || []).length > 0 &&
                                        <div className="negate">
                                            <CheckBox name={`cidr-notations-${i}`}
                                                      value={loa.negateCidrNotation}
                                                      info={I18n.t("policies.negateCidrNotation")}
                                                      onChange={e => loaChanged("negateCidrNotation", e.target.checked, i, null)}/>
                                        </div>}
                                    {(loa.cidrNotations || []).map((cidrNotation,  index)=>
                                        <div key={index} className="cidr-notations">
                                            <div className="cidr-notation">
                                                <input type="text"
                                                       value={cidrNotation.ipAddress}
                                                       onChange={e => cidrNotationChanged(i, index, "ipAddress", e.target.value)}
                                                       onBlur={e => validateIPAddress(e, i, index)}
                                                />
                                                <span className="cidr-divider">/</span>
                                                <Select
                                                    className="policy-cidr-prefix"
                                                    classNamePrefix="policy-cidr-prefix"
                                                    onChange={e => cidrNotationChanged(i, index, "prefix", e.value)}
                                                    value={{label: cidrNotation.prefix, value: cidrNotation.prefix}}
                                                    options={getPrefixes(cidrNotation)}
                                                    isSearchable={false}
                                                />
                                                <span onClick={() => removeCidrNotation(i, index)}>
                                                    <i className="fa fa-trash-o"/>
                                                </span>
                                            </div>
                                            {cidrNotation.invalid &&
                                                <span className="error">{I18n.t("policies.invalidCidr")}</span>}
                                            {cidrNotation.ipInfo && renderIpInfo(cidrNotation.ipInfo)}
                                        </div>)}
                                    <a href="#" className="add-cidr-notation" onClick={e => addCidrNotation(e, i)}>{I18n.t("policies.addIp")}</a>
                                </div>
                            </div>
                        </div>
                    )}
                <Select
                    className="policy-select max"
                    onChange={addLoa}
                    value={null}
                    options={allowedLoas
                        .filter(loa => !data.loas.some(dataLoa => loa === dataLoa.level))
                        .map(loa => ({value: loa, label: loa}))}
                    placeholder={I18n.t("policies.addLoa")}
                    isSearchable={false}
                />
                {isEmpty(data.loas) && renderError("Level of assurance")}
            </div>
            </>
        );
    }

    const renderAttributes = () => {
        return (
            <>
                <p>{I18n.t("policies.attribute")}</p>
                <PolicyAttributes
                    attributes={data.attributes}
                    onError={onError}
                    allAttributesMustMatch={data.allAttributesMustMatch}
                    allowedAttributes={policyAttributes}
                    setAttributes={(attributes, callback) => onChange("data.attributes", attributes, false, callback)}
                    includeNegate={false}
                    isRequired={true}
                    isPlayground={false}
                />
            </>

        );
    }

    const renderDescription = () => {
        return (
            <div className="input-field">
                <label htmlFor="description">
                    <span>{I18n.t("policies.description")}</span>
                    <i className="fa fa-info-circle"
                       data-for="description-tooltip"
                       data-tip/>
                    <ReactTooltip id="description-tooltip"
                                  type="info"
                                  place="right"
                                  class="tool-tip"
                                  effect="solid">
                        <span>{I18n.t("policies.descriptionTooltip")}</span>
                    </ReactTooltip>
                </label>
                <textarea id="description"
                          rows={5}
                          value={data.description}
                          onChange={e => internalOnChange(e, "description", true)}/>
                <a href="/" onClick={autoGenerateDescription}>{I18n.t("policies.autoGenerateDescription")}</a>
                {isEmpty(data.description) && renderError("Description")}
            </div>
        );
    }

    const renderDenyAdvice = () => {
        return (
            <div className="input-field">
                <label htmlFor="denyAdvice">
                    <span>{I18n.t("policies.denyAdvice")}</span>
                    <i className="fa fa-info-circle"
                       data-for="denyAdvice-tooltip"
                       data-tip/>
                    <ReactTooltip id="denyAdvice-tooltip"
                                  type="info"
                                  place="right"
                                  class="tool-tip"
                                  effect="solid">
                        <span>{I18n.t("policies.denyAdviceTooltip")}</span>
                    </ReactTooltip>
                </label>
                <input id="denyAdvice"
                       type="text"
                       value={data.denyAdvice || ""}
                       onChange={e => internalOnChange(e, "denyAdvice", true)}/>
                {isEmpty(data.denyAdvice) && renderError("Deny advice")}
            </div>
        );
    }

    const renderDenyAdviceNl = () => {
        return (
            <div className="input-field">
                <label htmlFor="denyAdviceNl">
                    <span>{I18n.t("policies.denyAdviceNl")}</span>
                </label>
                <input id="denyAdviceNl"
                       type="text"
                       value={data.denyAdviceNl || ""}
                       onChange={e => internalOnChange(e, "denyAdviceNl", true)}/>
                {isEmpty(data.denyAdviceNl) && renderError("Deny advice NL")}
            </div>
        );
    }

    const getPrefixes = cidrNotation => {
        if (cidrNotation.invalid || !cidrNotation.ipInfo || isEmpty(cidrNotation.ipInfo.networkAddress)) {
            return [];
        }
        return cidrNotation.ipInfo.ipv4 ? ipv4Prefixes : ipv6Prefixes;
    };


    const renderActive = () => {
        return (
            <div className="input-field row">
                <CheckBox name="active"
                          value={data.active}
                          onChange={e => onChange("data.active", e.target.checked)}
                          info={I18n.t("policies.active")}/>
                <i className="fa fa-info-circle"
                   data-for="active-tooltip"
                   data-tip/>
                <ReactTooltip id="active-tooltip"
                              type="info"
                              place="right"
                              class="tool-tip"
                              effect="solid">
                    <span>{I18n.t("policies.activeTooltip")}</span>
                </ReactTooltip>
            </div>
        );
    }

    const isRegularPolicy = data.type === "reg";

    const renderPolicyRules = () => {
        return (
            <PolicyRules value={data.allAttributesMustMatch}
                         setRule={val => onChange("data.allAttributesMustMatch", val)}
                         embedded={false}/>
        );
    }

    return (
        <section className="metadata-policy-form">
            {/*{JSON.stringify(errors)}*/}
            <section className="policy-form">
                {renderPolicyType()}
                {renderPolicyName()}
                {renderServiceProviders()}
                {renderIdentityProviders()}
                {isRegularPolicy && renderAccess()}
                {isRegularPolicy && renderPolicyRules()}
                {isRegularPolicy && renderAttributes()}
                {!isRegularPolicy && renderLoas()}
                {renderDescription()}
                {isRegularPolicy && renderDenyAdvice()}
                {isRegularPolicy && renderDenyAdviceNl()}
                {renderActive()}
            </section>
        </section>
    );
}
